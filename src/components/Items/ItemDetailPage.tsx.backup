import { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import {
  Box,
  Container,
  Button,
  Typography,
  Chip,
  IconButton,
  Divider,
  TextField,
  Alert,
  useTheme,
  useMediaQuery,
  CircularProgress,
  Menu,
  MenuItem,
  ListItemIcon,
  ListItemText,
  Checkbox,
  FormControlLabel,
  Select,
  FormControl,
} from '@mui/material';
import { MapPin, Calendar, Heart, Send, Package, Truck, Bot, Eye, ZoomIn, Tag, Ruler, Weight, Box as BoxIcon, Palette, Sparkles, Grid3x3, Hash, Share2, X, ChevronLeft, ChevronRight, MessageCircle, ArrowUp, Link, Mail, Printer, Phone, CreditCard as Edit, CreditCard as Edit2, Trash2 } from 'lucide-react';
import { useSwipeable } from 'react-swipeable';
import { Item, supabase, Profile, PickupAddress } from '../../lib/supabase';
import { getRelativeTimeString } from '../../utils/dateUtils';
import { getDetailImageUrl, getFullImageUrl } from '../../utils/imageUtils';
import { useFavorites } from '../../hooks/useFavorites';
import { useAuth } from '../../contexts/AuthContext';
import { useHandPreference } from '../../contexts/HandPreferenceContext';
import { useItemView } from '../../hooks/useItemView';
import { useAutoSave } from '../../hooks/useAutoSave';
import { InlineTextField } from './InlineEdit/InlineTextField';
import { InlineSelect } from './InlineEdit/InlineSelect';
import { InlineChipList } from './InlineEdit/InlineChipList';
import { InlineImageGallery } from './InlineEdit/InlineImageGallery';
import { Modal } from '../Common/Modal';

export const ItemDetailPage = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const location = useLocation();
  const { user } = useAuth();
  const { handPreference } = useHandPreference();
  const { isFavorite, toggleFavorite, loading: favoriteLoading } = useFavorites();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [item, setItem] = useState<Item | null>(null);
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState('');
  const [sending, setSending] = useState(false);
  const [messageSent, setMessageSent] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [sellerProfile, setSellerProfile] = useState<Profile | null>(null);
  const [pickupAddress, setPickupAddress] = useState<PickupAddress | null>(null);
  const [showImageModal, setShowImageModal] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const skipLoadRef = useRef(false);
  const [scrollOpacity, setScrollOpacity] = useState(1);
  const [scrollTranslate, setScrollTranslate] = useState(0);
  const messageInputRef = useRef<HTMLInputElement>(null);
  const [showScrollTop, setShowScrollTop] = useState(false);
  const [shareMenuAnchor, setShareMenuAnchor] = useState<null | HTMLElement>(null);
  const [itemImages, setItemImages] = useState<string[]>([]);

  const [isEditMode, setIsEditMode] = useState(false);
  const [draftData, setDraftData] = useState<any>({});
  const [isPublishing, setIsPublishing] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);

  const { status: autoSaveStatus } = useAutoSave({
    itemId: id || '',
    draftData,
    enabled: isEditMode && hasUnsavedChanges,
    debounceMs: 1500,
  });

  const allItems = (location.state as { allItems?: Item[] })?.allItems || [];
  const currentIndex = allItems.findIndex(i => i.id === id);
  const hasPrevious = currentIndex > 0;
  const hasNext = currentIndex >= 0 && currentIndex < allItems.length - 1;

  const navigateBack = () => {
    const returnSearch = sessionStorage.getItem('returnSearch');
    if (returnSearch) {
      navigate(`/${returnSearch}`);
      sessionStorage.removeItem('returnSearch');
    } else {
      navigate('/');
    }
  };

  const navigateToItem = async (direction: 'prev' | 'next') => {
    const targetItem = direction === 'prev' && hasPrevious
      ? allItems[currentIndex - 1]
      : direction === 'next' && hasNext
      ? allItems[currentIndex + 1]
      : null;

    if (!targetItem) return;

    setItem(targetItem);
    setCurrentImageIndex(0);
    window.scrollTo(0, 0);

    // Load additional images for target item
    const { data: imagesData } = await supabase
      .from('item_images')
      .select('image_url, display_order, is_primary')
      .eq('item_id', targetItem.id)
      .order('display_order', { ascending: true });

    if (imagesData && imagesData.length > 0) {
      setItemImages(imagesData.map(img => img.image_url));
    } else {
      setItemImages(targetItem.image_url ? [targetItem.image_url] : []);
    }

    const { data: profileData } = await supabase
      .from('profiles')
      .select('show_location_to_public, full_name')
      .eq('id', targetItem.user_id)
      .maybeSingle();
    setSellerProfile(profileData);

    // Load pickup address if available
    if (targetItem.selected_address_id) {
      const { data: addressData } = await supabase
        .from('addresses')
        .select('*')
        .eq('id', targetItem.selected_address_id)
        .maybeSingle();

      setPickupAddress(addressData);
    } else {
      setPickupAddress(null);
    }

    skipLoadRef.current = true;
    navigate(`/item/${targetItem.id}`, { state: { allItems }, replace: true });
  };

  const images = itemImages.length > 0 ? itemImages : (item?.image_url ? [item.image_url] : []);

  const handlePrevImage = () => {
    setCurrentImageIndex((prev) => (prev === 0 ? images.length - 1 : prev - 1));
  };

  const handleNextImage = () => {
    setCurrentImageIndex((prev) => (prev === images.length - 1 ? 0 : prev + 1));
  };

  const imageSwipeHandlers = useSwipeable({
    onSwipedLeft: handleNextImage,
    onSwipedRight: handlePrevImage,
    trackMouse: false,
    trackTouch: true,
  });


  const itemSwipeHandlers = useSwipeable({
    onSwipedLeft: () => hasNext && navigateToItem('next'),
    onSwipedRight: () => hasPrevious && navigateToItem('prev'),
    trackMouse: false,
    trackTouch: true,
  });

  useItemView(item?.id, !!item);

  useEffect(() => {
    const handleScroll = () => {
      setShowScrollTop(window.scrollY > 500);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const loadItem = async () => {
    if (!id) return;

    if (skipLoadRef.current) {
      skipLoadRef.current = false;
      return;
    }

    setLoading(true);
    try {
      const { data, error } = await supabase
        .from('items')
        .select('*')
        .eq('id', id)
        .eq('status', 'published')
        .maybeSingle();

      if (error) throw error;
      if (!data) {
        navigate('/');
        return;
      }

      setItem(data);

      if (data.has_draft && data.draft_data && user && user.id === data.user_id) {
        setDraftData(data.draft_data);
      }

      // Load additional images from item_images table
      const { data: imagesData } = await supabase
        .from('item_images')
        .select('image_url, display_order, is_primary')
        .eq('item_id', id)
        .order('display_order', { ascending: true });

      if (imagesData && imagesData.length > 0) {
        setItemImages(imagesData.map(img => img.image_url));
      } else {
        // Fallback to main image_url if no images in item_images table
        setItemImages(data.image_url ? [data.image_url] : []);
      }

      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('show_location_to_public, full_name')
        .eq('id', data.user_id)
        .maybeSingle();

      if (profileError) throw profileError;
      setSellerProfile(profileData);

      // Load pickup address if available
      if (data.selected_address_id) {
        const { data: addressData } = await supabase
          .from('addresses')
          .select('*')
          .eq('id', data.selected_address_id)
          .maybeSingle();

        setPickupAddress(addressData);
      } else {
        setPickupAddress(null);
      }
    } catch (err) {
      console.error('Error loading item:', err);
      navigate('/');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadItem();
  }, [id, navigate]);

  const handleEnterEditMode = () => {
    if (!item) return;

    const initialDraft = item.has_draft && item.draft_data
      ? item.draft_data
      : {
          title: item.title,
          description: item.description,
          price: item.price,
          price_negotiable: item.price_negotiable || false,
          is_free: item.is_free || false,
          category: item.category || '',
          brand: item.brand || '',
          condition: item.condition || '',
          size: item.size || '',
          weight: item.weight || '',
          dimensions_length: item.dimensions_length || '',
          dimensions_width: item.dimensions_width || '',
          dimensions_height: item.dimensions_height || '',
          material: item.material || '',
          colors: item.colors || [],
          style: item.style || '',
          serial_number: item.serial_number || '',
          features: item.features || [],
          accessories: item.accessories || [],
        };

    setDraftData(initialDraft);
    setIsEditMode(true);
    setHasUnsavedChanges(false);
  };

  const handleUpdateDraft = (field: string, value: any) => {
    setDraftData((prev: any) => ({
      ...prev,
      [field]: value,
    }));
    setHasUnsavedChanges(true);
  };

  const handlePublish = async () => {
    if (!item || !id) return;

    setIsPublishing(true);
    try {
      const { images, ...validDraftData } = draftData;

      const { error } = await supabase
        .from('items')
        .update({
          ...validDraftData,
          has_draft: false,
          draft_data: null,
          draft_updated_at: null,
          updated_at: new Date().toISOString(),
        })
        .eq('id', id);

      if (error) throw error;

      setItem({ ...item, ...validDraftData });
      setIsEditMode(false);
      setHasUnsavedChanges(false);
      setDraftData({});

      await loadItem();
    } catch (err) {
      console.error('Error publishing:', err);
      setError('Fehler beim Veröffentlichen der Änderungen');
    } finally {
      setIsPublishing(false);
    }
  };

  const handleCancelEdit = async () => {
    if (!id) return;

    try {
      await supabase
        .from('items')
        .update({
          has_draft: false,
          draft_data: null,
          draft_updated_at: null,
        })
        .eq('id', id);

      setIsEditMode(false);
      setHasUnsavedChanges(false);
      setDraftData({});
    } catch (err) {
      console.error('Error canceling edit:', err);
    }
  };

  useEffect(() => {
    window.scrollTo(0, 0);
    setCurrentImageIndex(0);
  }, [item?.id]);

  useEffect(() => {
    if (!isMobile) return;

    const handleScroll = () => {
      const scrollY = window.scrollY;
      const maxScroll = 300;
      const opacity = Math.max(0.3, 1 - (scrollY / maxScroll));
      const translateY = -(scrollY * 0.5);
      setScrollOpacity(opacity);
      setScrollTranslate(translateY);
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, [isMobile]);



  const handleFavoriteClick = async () => {
    if (!item) return;
    await toggleFavorite(item.id);
  };

  const handleInlineEditSave = () => {
  };

  const handleShareClick = (event: React.MouseEvent<HTMLElement>) => {
    setShareMenuAnchor(event.currentTarget);
  };

  const handleShareClose = () => {
    setShareMenuAnchor(null);
  };

  const copyToClipboard = async () => {
    if (!item) return;

    const url = window.location.href;
    try {
      await navigator.clipboard.writeText(url);
      alert('Link wurde in die Zwischenablage kopiert!');
    } catch (err) {
      const textArea = document.createElement('textarea');
      textArea.value = url;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      document.body.appendChild(textArea);
      textArea.select();
      try {
        document.execCommand('copy');
        alert('Link wurde in die Zwischenablage kopiert!');
      } catch (e) {
        console.error('Error copying to clipboard:', e);
        alert('Kopieren fehlgeschlagen. Bitte manuell kopieren: ' + url);
      }
      document.body.removeChild(textArea);
    }
    handleShareClose();
  };

  const shareViaWhatsApp = () => {
    if (!item) return;
    const url = window.location.href;
    const text = `${item.title} - ${item.price.toFixed(2)} €`;
    window.open(`https://wa.me/?text=${encodeURIComponent(text + ' ' + url)}`, '_blank');
    handleShareClose();
  };

  const shareViaFacebook = () => {
    if (!item) return;
    const url = window.location.href;
    window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`, '_blank');
    handleShareClose();
  };

  const shareViaTwitter = () => {
    if (!item) return;
    const url = window.location.href;
    const text = `${item.title} - ${item.price.toFixed(2)} €`;
    window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`, '_blank');
    handleShareClose();
  };

  const shareViaTelegram = () => {
    if (!item) return;
    const url = window.location.href;
    const text = `${item.title} - ${item.price.toFixed(2)} €`;
    window.open(`https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(text)}`, '_blank');
    handleShareClose();
  };

  const shareViaEmail = () => {
    if (!item) return;
    const url = window.location.href;
    const subject = item.title;
    const body = `${item.title}\n\nPreis: ${item.price.toFixed(2)} €\n\n${url}`;
    window.location.href = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    handleShareClose();
  };

  const handlePrint = () => {
    handleShareClose();
    window.print();
  };

  const handleSendMessage = async () => {
    if (!user) {
      alert('Bitte melde dich an, um eine Nachricht zu senden.');
      return;
    }

    if (!message.trim() || !item) {
      setError('Bitte gib eine Nachricht ein.');
      return;
    }

    if (user.id === item.user_id) {
      setError('Du kannst dir selbst keine Nachricht senden.');
      return;
    }

    setSending(true);
    setError(null);

    try {
      const { data: existingConversation, error: conversationError } = await supabase
        .from('conversations')
        .select('id')
        .eq('item_id', item.id)
        .eq('buyer_id', user.id)
        .eq('seller_id', item.user_id)
        .maybeSingle();

      if (conversationError && conversationError.code !== 'PGRST116') {
        throw conversationError;
      }

      let conversationId: string;

      if (existingConversation) {
        conversationId = existingConversation.id;
      } else {
        const { data: newConversation, error: createError } = await supabase
          .from('conversations')
          .insert({
            item_id: item.id,
            buyer_id: user.id,
            seller_id: item.user_id,
          })
          .select('id')
          .single();

        if (createError) throw createError;
        conversationId = newConversation.id;
      }

      const { error: messageError } = await supabase
        .from('messages')
        .insert({
          conversation_id: conversationId,
          sender_id: user.id,
          content: message.trim(),
        });

      if (messageError) throw messageError;

      setMessage('');
      setMessageSent(true);
      setTimeout(() => setMessageSent(false), 3000);
    } catch (err) {
      console.error('Error sending message:', err);
      setError('Fehler beim Senden der Nachricht. Bitte versuche es erneut.');
    } finally {
      setSending(false);
    }
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '100vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  if (!item) {
    return null;
  }

  return (
    <Box sx={{ minHeight: '100vh', bgcolor: '#fafafa' }}>
      {/* Print-only content */}
      <Box className="print-only" sx={{ display: 'none' }}>
        {/* Clean Print Header */}
        <Box className="print-header">
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
            <Box>
              <img src="/logo.png" alt="HABDAWAS Logo" className="print-logo" />
            </Box>
            <Box sx={{ textAlign: 'right', fontSize: '8pt', color: '#666' }}>
              <Typography variant="caption" sx={{ display: 'block', fontSize: '8pt' }}>Gedruckt: {new Date().toLocaleDateString('de-DE', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })}</Typography>
            </Box>
          </Box>
        </Box>

        {/* Compact Title and Main Info */}
        <Box className="print-main-section">
          <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
            {/* Image Column */}
            <Box className="print-image-container">
              {images.slice(0, 1).map((img, idx) => (
                <img key={idx} src={img} alt={item.title} className="print-main-image" />
              ))}
            </Box>

            {/* Info Column */}
            <Box sx={{ flex: 1 }}>
              <Typography className="print-title">{item.title}</Typography>
              <Box className="print-price-box">{item.price.toFixed(2)} €</Box>
            </Box>
          </Box>
        </Box>

        {/* Compact Details Grid */}
        <Box className="print-details-grid">
            {(item.postal_code || item.location) && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">📍 Standort:</Box>
                <Box className="print-detail-value">
                  {item.postal_code && item.location
                    ? `${item.postal_code} ${item.location}`
                    : item.postal_code || item.location}
                </Box>
              </Box>
            )}

            {item.condition && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">✨ Zustand:</Box>
                <Box className="print-detail-value">{item.condition}</Box>
              </Box>
            )}

            {item.brand && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">🏷️ Marke:</Box>
                <Box className="print-detail-value">{item.brand}</Box>
              </Box>
            )}

            {item.category && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">📦 Kategorie:</Box>
                <Box className="print-detail-value">{item.category}</Box>
              </Box>
            )}

            {item.subcategory && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">📑 Unterkategorie:</Box>
                <Box className="print-detail-value">{item.subcategory}</Box>
              </Box>
            )}

            {item.shipping_cost !== null && item.shipping_cost !== undefined && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">🚚 Versandkosten:</Box>
                <Box className="print-detail-value">
                  {item.shipping_cost === 0 ? 'Kostenloser Versand' : `${item.shipping_cost.toFixed(2)} €`}
                </Box>
              </Box>
            )}

            {item.size && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">📏 Größe:</Box>
                <Box className="print-detail-value">{item.size}</Box>
              </Box>
            )}

            {(item.dimensions_length || item.dimensions_width || item.dimensions_height) && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">📐 Abmessungen:</Box>
                <Box className="print-detail-value">
                  {item.dimensions_length && item.dimensions_width && item.dimensions_height
                    ? `${item.dimensions_length} × ${item.dimensions_width} × ${item.dimensions_height} cm`
                    : [item.dimensions_length, item.dimensions_width, item.dimensions_height].filter(Boolean).join(' × ') + ' cm'}
                </Box>
              </Box>
            )}

            {item.weight && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">⚖️ Gewicht:</Box>
                <Box className="print-detail-value">{item.weight}</Box>
              </Box>
            )}

            {item.quantity && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">🔢 Verfügbare Menge:</Box>
                <Box className="print-detail-value">{item.quantity}</Box>
              </Box>
            )}

            {item.colors && item.colors.length > 0 && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">🎨 Farben:</Box>
                <Box className="print-detail-value">{item.colors.join(', ')}</Box>
              </Box>
            )}

            {item.material && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">🧵 Material:</Box>
                <Box className="print-detail-value">{item.material}</Box>
              </Box>
            )}

            {item.style && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">✂️ Stil:</Box>
                <Box className="print-detail-value">{item.style}</Box>
              </Box>
            )}

            {item.serial_number && item.serial_number.toLowerCase() !== 'unbekannt' && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">🔖 Seriennummer:</Box>
                <Box className="print-detail-value">{item.serial_number}</Box>
              </Box>
            )}

            {item.item_number && (
              <Box className="print-detail-row">
                <Box className="print-detail-label">🔢 Artikelnummer:</Box>
                <Box className="print-detail-value">{item.item_number}</Box>
              </Box>
            )}
        </Box>

        {/* Description */}
        {item.description && (
          <Box className="print-description-box">
            <span className="print-section-title">📝 Beschreibung:</span>
            <Typography className="print-description-text">{item.description}</Typography>
          </Box>
        )}

        {/* Features & Accessories */}
        {(item.features?.length > 0 || item.accessories?.length > 0) && (
          <Box className="print-extra-box">
            {item.features?.length > 0 && (
              <Box sx={{ mb: 1 }}>
                <span className="print-section-title">⭐ Merkmale:</span> {item.features.join(' • ')}
              </Box>
            )}
            {item.accessories?.length > 0 && (
              <Box>
                <span className="print-section-title">🎁 Zubehör:</span> {item.accessories.join(' • ')}
              </Box>
            )}
          </Box>
        )}

        {/* Seller Contact Info */}
        {sellerProfile && (
          <Box className="print-contact-section">
            <Box className="print-section-title">📞 Kontakt zum Anbieter:</Box>
            <Box sx={{ fontSize: '8.5pt', lineHeight: 1.5 }}>
              {sellerProfile.full_name && (
                <Box><strong>Name:</strong> {sellerProfile.full_name}</Box>
              )}
              {pickupAddress?.phone && pickupAddress?.show_phone_publicly && (
                <Box><strong>Telefon:</strong> {pickupAddress.phone}</Box>
              )}
              <Box><strong>Nachricht:</strong> Über HABDAWAS.at Nachrichten-System</Box>
            </Box>
          </Box>
        )}

        {/* Compact Footer */}
        <Box className="print-footer">
          <Typography variant="caption" sx={{ fontSize: '7pt' }}>
            HABDAWAS.at • Hollenthon 33, 2812 Hollenthon • +43 650 25 26 266 • ID: {item.id.slice(0, 10)}
          </Typography>
        </Box>
      </Box>

      <Menu
        anchorEl={shareMenuAnchor}
        open={Boolean(shareMenuAnchor)}
        onClose={handleShareClose}
        PaperProps={{
          sx: {
            mt: 1,
            minWidth: 200,
            boxShadow: '0 4px 20px rgba(0,0,0,0.15)',
            borderRadius: 2,
          },
        }}
      >
        <MenuItem onClick={copyToClipboard}>
          <ListItemIcon>
            <Link size={20} />
          </ListItemIcon>
          <ListItemText>Link kopieren</ListItemText>
        </MenuItem>
        <Divider sx={{ my: 0.5 }} />
        <MenuItem onClick={shareViaWhatsApp}>
          <ListItemIcon>
            <Box sx={{ width: 20, height: 20, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
              <svg viewBox="0 0 24 24" fill="currentColor" style={{ width: '100%', height: '100%' }}>
                <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"/>
              </svg>
            </Box>
          </ListItemIcon>
          <ListItemText>WhatsApp</ListItemText>
        </MenuItem>
        <MenuItem onClick={shareViaFacebook}>
          <ListItemIcon>
            <Box sx={{ width: 20, height: 20, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
              <svg viewBox="0 0 24 24" fill="currentColor" style={{ width: '100%', height: '100%' }}>
                <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
              </svg>
            </Box>
          </ListItemIcon>
          <ListItemText>Facebook</ListItemText>
        </MenuItem>
        <MenuItem onClick={shareViaTwitter}>
          <ListItemIcon>
            <Box sx={{ width: 20, height: 20, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
              <svg viewBox="0 0 24 24" fill="currentColor" style={{ width: '100%', height: '100%' }}>
                <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
              </svg>
            </Box>
          </ListItemIcon>
          <ListItemText>X (Twitter)</ListItemText>
        </MenuItem>
        <MenuItem onClick={shareViaTelegram}>
          <ListItemIcon>
            <Box sx={{ width: 20, height: 20, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
              <svg viewBox="0 0 24 24" fill="currentColor" style={{ width: '100%', height: '100%' }}>
                <path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"/>
              </svg>
            </Box>
          </ListItemIcon>
          <ListItemText>Telegram</ListItemText>
        </MenuItem>
        <MenuItem onClick={shareViaEmail}>
          <ListItemIcon>
            <Mail size={20} />
          </ListItemIcon>
          <ListItemText>E-Mail</ListItemText>
        </MenuItem>
        <Divider sx={{ my: 0.5 }} />
        <MenuItem onClick={handlePrint}>
          <ListItemIcon>
            <Printer size={20} />
          </ListItemIcon>
          <ListItemText>Drucken</ListItemText>
        </MenuItem>
      </Menu>

      {!isMobile && allItems.length > 0 && (
        <Box sx={{
          position: 'fixed',
          top: 72,
          left: 0,
          right: 0,
          zIndex: 100,
          bgcolor: 'white',
          borderBottom: '1px solid',
          borderColor: 'divider',
          py: 2,
        }}>
          <Container maxWidth="lg">
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5, py: 1 }}>
              <Button
                variant="text"
                startIcon={<ChevronLeft size={18} />}
                onClick={navigateBack}
                sx={{
                  textTransform: 'none',
                  fontSize: '14px',
                  fontWeight: 500,
                  px: 2,
                  py: 0.75,
                  minWidth: 'auto',
                  color: 'text.secondary',
                }}
              >
                Zurück
              </Button>

              {user?.id === item.user_id && (
                <>
                  <Button
                    variant={isEditMode ? "contained" : "outlined"}
                    startIcon={<Edit size={18} />}
                    onClick={() => setIsEditMode(!isEditMode)}
                    size="medium"
                    sx={{
                      textTransform: 'none',
                      fontSize: '15px',
                      fontWeight: 600,
                      px: 2.5,
                      py: 1,
                      minWidth: 'auto',
                      borderWidth: '1.5px',
                      '&:hover': {
                        borderWidth: '1.5px',
                      }
                    }}
                  >
                    Bearbeiten
                  </Button>

                  <FormControl
                    size="small"
                    sx={{
                      minWidth: 140,
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 5,
                        bgcolor: 'background.paper',
                        '&:hover .MuiOutlinedInput-notchedOutline': {
                          borderColor: 'primary.main',
                          borderWidth: '1.5px',
                        },
                      },
                      '& .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'rgba(0, 0, 0, 0.12)',
                        borderWidth: '1.5px',
                      },
                    }}
                  >
                    <Select
                      value={draftData.status || item.status}
                      onChange={(e) => handleUpdateDraft('status', e.target.value)}
                      disabled={!isEditMode}
                      renderValue={(value) => {
                        const getStatusColor = (status: string) => {
                          switch (status) {
                            case 'published': return '#4caf50';
                            case 'draft': return '#9e9e9e';
                            case 'sold': return '#2196f3';
                            case 'archived': return '#757575';
                            default: return '#9e9e9e';
                          }
                        };
                        const getStatusLabel = (status: string) => {
                          const labels: Record<string, string> = {
                            draft: 'Entwurf',
                            published: 'Live',
                            sold: 'Verkauft',
                            archived: 'Archiviert',
                          };
                          return labels[status] || status;
                        };
                        return (
                          <Chip
                            label={getStatusLabel(value as string)}
                            size="small"
                            sx={{
                              bgcolor: getStatusColor(value as string),
                              color: 'white',
                              fontWeight: 600,
                              fontSize: '13px',
                              height: 24,
                            }}
                          />
                        );
                      }}
                      sx={{
                        fontSize: '14px',
                        '& .MuiSelect-select': {
                          py: 0.75,
                          display: 'flex',
                          alignItems: 'center',
                        }
                      }}
                    >
                      <MenuItem value="draft">Entwurf</MenuItem>
                      <MenuItem value="published">Live</MenuItem>
                      <MenuItem value="sold">Verkauft</MenuItem>
                      <MenuItem value="archived">Archiviert</MenuItem>
                    </Select>
                  </FormControl>

                  {isEditMode && (
                    <IconButton
                      color="error"
                      size="small"
                      onClick={() => setShowDeleteModal(true)}
                      sx={{
                        '&:hover': {
                          bgcolor: 'error.lighter',
                        }
                      }}
                    >
                      <Trash2 size={18} />
                    </IconButton>
                  )}
                </>
              )}

              <Box sx={{ flex: 1 }} />

              <IconButton
                onClick={() => navigateToItem('prev')}
                disabled={!hasPrevious}
                size="small"
                sx={{
                  color: 'text.secondary',
                  '&.Mui-disabled': { color: 'action.disabled' },
                }}
              >
                <ChevronLeft size={20} />
              </IconButton>

              <Typography variant="caption" color="text.secondary" sx={{ minWidth: 60, textAlign: 'center', fontSize: '13px' }}>
                {currentIndex + 1} / {allItems.length}
              </Typography>

              <IconButton
                onClick={() => navigateToItem('next')}
                disabled={!hasNext}
                size="small"
                sx={{
                  color: 'text.secondary',
                  '&.Mui-disabled': { color: 'action.disabled' },
                }}
              >
                <ChevronRight size={20} />
              </IconButton>
            </Box>
          </Container>
        </Box>
      )}

      <Container maxWidth="lg" sx={{ py: isMobile ? 2 : 3, px: isMobile ? 0 : 3, pt: !isMobile && allItems.length > 0 ? 14 : (isMobile ? 2 : 3) }}>
        <Box sx={{ display: 'flex', flexDirection: isMobile ? 'column' : 'row', gap: isMobile ? 0 : 3 }}>
          {!isMobile && (
            <Box
              sx={{
                flex: '1 1 40%',
                position: 'sticky',
                top: allItems.length > 0 ? 160 : 80,
                alignSelf: 'flex-start',
                maxHeight: allItems.length > 0 ? 'calc(100vh - 260px)' : 'calc(100vh - 180px)',
                display: 'flex',
                flexDirection: 'column',
                gap: 2,
              }}
            >
              {user?.id === item.user_id && isEditMode && (
                <Box sx={{ bgcolor: 'white', p: 2, borderRadius: 2, boxShadow: 2 }}>
                  <InlineImageGallery
                    images={draftData.images || images.map(url => ({
                      preview: url,
                      existingUrl: url,
                      isPrimary: url === images[0],
                    }))}
                    onChange={(newImages) => handleUpdateDraft('images', newImages)}
                    isEditing={isEditMode}
                  />
                </Box>
              )}

              {/* Main Image */}
              <Box
                sx={{
                  position: 'relative',
                  width: '100%',
                  height: images.length > 1 ? 'calc(100% - 120px)' : '100%',
                  bgcolor: '#f5f5f5',
                  borderRadius: 2,
                  overflow: 'hidden',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  cursor: 'pointer',
                  boxShadow: 3,
                }}
                onClick={() => setShowImageModal(true)}
              >
                <Box
                  component="img"
                  src={getDetailImageUrl(images[currentImageIndex])}
                  alt={item.title}
                  loading="lazy"
                  sx={{
                    maxWidth: '100%',
                    maxHeight: '100%',
                    objectFit: 'contain',
                    transition: 'opacity 0.3s ease-in-out',
                  }}
                />
                {images.length > 1 && (
                  <>
                    <IconButton
                      onClick={(e) => { e.stopPropagation(); handlePrevImage(); }}
                      disabled={currentImageIndex === 0}
                      sx={{
                        position: 'absolute',
                        left: 12,
                        top: '50%',
                        transform: 'translateY(-50%)',
                        bgcolor: 'rgba(255,255,255,0.95)',
                        '&:hover': { bgcolor: 'white' },
                        '&.Mui-disabled': {
                          bgcolor: 'rgba(255,255,255,0.5)',
                          opacity: 0.5,
                        },
                        boxShadow: 2,
                        zIndex: 2,
                      }}
                    >
                      <ChevronLeft />
                    </IconButton>
                    <IconButton
                      onClick={(e) => { e.stopPropagation(); handleNextImage(); }}
                      disabled={currentImageIndex === images.length - 1}
                      sx={{
                        position: 'absolute',
                        right: 12,
                        top: '50%',
                        transform: 'translateY(-50%)',
                        bgcolor: 'rgba(255,255,255,0.95)',
                        '&:hover': { bgcolor: 'white' },
                        '&.Mui-disabled': {
                          bgcolor: 'rgba(255,255,255,0.5)',
                          opacity: 0.5,
                        },
                        boxShadow: 2,
                        zIndex: 2,
                      }}
                    >
                      <ChevronRight />
                    </IconButton>
                    <Box
                      sx={{
                        position: 'absolute',
                        top: 12,
                        right: 12,
                        bgcolor: 'rgba(0,0,0,0.65)',
                        color: 'white',
                        px: 2,
                        py: 0.5,
                        borderRadius: 2,
                        fontSize: '0.875rem',
                        fontWeight: 600,
                        zIndex: 2,
                      }}
                    >
                      {currentImageIndex + 1} / {images.length}
                    </Box>
                  </>
                )}
              </Box>

              {/* Thumbnail Row */}
              {images.length > 1 && (
                <Box
                  sx={{
                    display: 'flex',
                    gap: 1.5,
                    overflowX: 'auto',
                    pb: 1,
                    '&::-webkit-scrollbar': {
                      height: 6,
                    },
                    '&::-webkit-scrollbar-track': {
                      bgcolor: '#f5f5f5',
                      borderRadius: 3,
                    },
                    '&::-webkit-scrollbar-thumb': {
                      bgcolor: '#ccc',
                      borderRadius: 3,
                      '&:hover': {
                        bgcolor: '#999',
                      },
                    },
                  }}
                >
                  {images.map((imageUrl, index) => (
                    <Box
                      key={index}
                      onClick={() => setCurrentImageIndex(index)}
                      sx={{
                        minWidth: 100,
                        width: 100,
                        height: 100,
                        borderRadius: 1.5,
                        overflow: 'hidden',
                        cursor: 'pointer',
                        border: currentImageIndex === index ? '3px solid #1976d2' : '3px solid transparent',
                        opacity: currentImageIndex === index ? 1 : 0.6,
                        transition: 'all 0.2s ease',
                        position: 'relative',
                        '&:hover': {
                          opacity: 1,
                          transform: 'scale(1.05)',
                        },
                      }}
                    >
                      <Box
                        component="img"
                        src={getDetailImageUrl(imageUrl)}
                        alt={`${item.title} - Vorschau ${index + 1}`}
                        loading="lazy"
                        sx={{
                          width: '100%',
                          height: '100%',
                          objectFit: 'cover',
                        }}
                      />
                      {index === 0 && (
                        <Box
                          sx={{
                            position: 'absolute',
                            top: 4,
                            left: 4,
                            bgcolor: 'primary.main',
                            color: 'white',
                            px: 0.75,
                            py: 0.25,
                            borderRadius: 1,
                            fontSize: '0.65rem',
                            fontWeight: 700,
                            textTransform: 'uppercase',
                          }}
                        >
                          Haupt
                        </Box>
                      )}
                    </Box>
                  ))}
                </Box>
              )}
            </Box>
          )}

          <Box
            {...(isMobile && allItems.length > 0 ? itemSwipeHandlers : {})}
            sx={{
              flex: isMobile ? '1' : '1 1 60%',
              bgcolor: 'white',
              borderRadius: 2,
              overflow: isMobile ? 'visible' : 'visible',
              maxHeight: isMobile ? 'none' : 'none',
            }}
          >
            {isMobile && (
              <Box
                {...imageSwipeHandlers}
                sx={{
                  position: 'fixed',
                  top: 55,
                  left: 0,
                  right: 0,
                  width: '100%',
                  height: '400px',
                  bgcolor: '#f5f5f5',
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  cursor: 'pointer',
                  zIndex: 1,
                  opacity: scrollOpacity,
                  transition: 'opacity 0.1s ease-out',
                }}
                onClick={() => setShowImageModal(true)}
              >
                <Box
                  component="img"
                  src={getDetailImageUrl(images[currentImageIndex])}
                  alt={item.title}
                  loading="lazy"
                  sx={{
                    width: '100%',
                    height: '100%',
                    display: 'block',
                    objectFit: 'cover',
                    objectPosition: 'center',
                    transform: `translateY(${scrollTranslate}px)`,
                    transition: 'transform 0.05s ease-out, opacity 0.3s ease-in-out',
                  }}
                />
                {images.length > 1 && (
                  <>
                    <IconButton
                      onClick={(e) => { e.stopPropagation(); handlePrevImage(); }}
                      disabled={currentImageIndex === 0}
                      sx={{
                        position: 'absolute',
                        left: 8,
                        top: '50%',
                        transform: 'translateY(-50%)',
                        bgcolor: 'rgba(255,255,255,0.9)',
                        '&:hover': { bgcolor: 'white' },
                        '&.Mui-disabled': {
                          bgcolor: 'rgba(255,255,255,0.5)',
                          opacity: 0.5,
                        },
                        boxShadow: 2,
                        zIndex: 2,
                      }}
                    >
                      <ChevronLeft />
                    </IconButton>
                    <IconButton
                      onClick={(e) => { e.stopPropagation(); handleNextImage(); }}
                      disabled={currentImageIndex === images.length - 1}
                      sx={{
                        position: 'absolute',
                        right: 8,
                        top: '50%',
                        transform: 'translateY(-50%)',
                        bgcolor: 'rgba(255,255,255,0.9)',
                        '&:hover': { bgcolor: 'white' },
                        '&.Mui-disabled': {
                          bgcolor: 'rgba(255,255,255,0.5)',
                          opacity: 0.5,
                        },
                        boxShadow: 2,
                        zIndex: 2,
                      }}
                    >
                      <ChevronRight />
                    </IconButton>
                    <Box
                      sx={{
                        position: 'absolute',
                        bottom: 16,
                        left: '50%',
                        transform: 'translateX(-50%)',
                        bgcolor: 'rgba(0,0,0,0.6)',
                        color: 'white',
                        px: 2,
                        py: 0.5,
                        borderRadius: 2,
                        fontSize: '0.875rem',
                        fontWeight: 600,
                        zIndex: 2,
                      }}
                    >
                      {currentImageIndex + 1} / {images.length}
                    </Box>
                  </>
                )}
              </Box>
            )}

            <Box
              sx={{
                p: isMobile ? 2 : 4,
                px: isMobile ? 2 : 4,
                maxWidth: 800,
                bgcolor: 'white',
                borderRadius: isMobile ? '12px 12px 0 0' : 0,
                mt: isMobile ? '400px' : 0,
                position: 'relative',
                zIndex: 10,
              }}
            >
              {isMobile && (
                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mt: 3, mb: 3 }}>
                  <Button
                    variant="text"
                    startIcon={<ChevronLeft size={18} />}
                    onClick={navigateBack}
                    sx={{
                      textTransform: 'none',
                      fontWeight: 600,
                      color: 'text.secondary',
                      px: 0,
                      '&:hover': {
                        bgcolor: 'transparent',
                        color: 'primary.main',
                      },
                    }}
                  >
                    Zurück zur Liste
                  </Button>
                  <Box sx={{ display: 'flex', gap: 1 }}>
                    <IconButton
                      onClick={handleFavoriteClick}
                      disabled={!user || favoriteLoading}
                      sx={{
                        color: 'text.primary',
                        '&:hover': { bgcolor: 'rgba(0,0,0,0.04)' }
                      }}
                    >
                      {item && isFavorite(item.id) ? <Heart size={20} fill="currentColor" /> : <Heart size={20} />}
                    </IconButton>
                    <IconButton
                      onClick={handleShareClick}
                      sx={{
                        color: 'text.primary',
                        '&:hover': { bgcolor: 'rgba(0,0,0,0.04)' }
                      }}
                    >
                      <Share2 size={20} />
                    </IconButton>
                  </Box>
                </Box>
              )}
              <Box sx={{ display: 'flex', alignItems: 'start', justifyContent: 'space-between', mb: isMobile ? 1.5 : 3 }}>
                <Box sx={{ flex: 1 }}>
                  {isEditMode ? (
                    <InlineTextField
                      value={draftData.title || item.title}
                      isEditing={true}
                      onChange={(value) => handleUpdateDraft('title', value)}
                      variant={isMobile ? 'h5' : 'h4'}
                      placeholder="Artikeltitel"
                      required
                    />
                  ) : (
                    <Typography variant={isMobile ? 'h5' : 'h4'} component="h1" sx={{ mb: 1.5, fontWeight: 700 }}>
                      {item.title}
                    </Typography>
                  )}
                </Box>
                {!isMobile && (
                  <Box sx={{ display: 'flex', gap: 1, ml: 2 }}>
                    <IconButton
                      onClick={handleFavoriteClick}
                      disabled={!user || favoriteLoading}
                      sx={{
                        color: 'text.primary',
                        '&:hover': { bgcolor: 'rgba(0,0,0,0.04)' }
                      }}
                    >
                      {item && isFavorite(item.id) ? <Heart size={20} fill="currentColor" /> : <Heart size={20} />}
                    </IconButton>
                    <IconButton
                      onClick={handleShareClick}
                      sx={{
                        color: 'text.primary',
                        '&:hover': { bgcolor: 'rgba(0,0,0,0.04)' }
                      }}
                    >
                      <Share2 size={20} />
                    </IconButton>
                  </Box>
                )}
              </Box>
              <Box sx={{ display: 'flex', gap: 2, alignItems: 'center', flexWrap: 'wrap', mb: 1.5 }}>
                {(item.postal_code || item.location) && (
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                    <MapPin size={18} color="#666" />
                    <Typography variant="body2" color="text.secondary">
                      {item.postal_code && item.location
                        ? `${item.postal_code} ${item.location}`
                        : item.postal_code || item.location}
                    </Typography>
                  </Box>
                )}
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                  <Calendar size={18} color="#666" />
                  <Typography variant="body2" color="text.secondary">
                    {getRelativeTimeString(item.created_at)}
                  </Typography>
                </Box>
              </Box>


              <Box sx={{ mb: isMobile ? 1.5 : 3, p: isMobile ? 1.5 : 2, bgcolor: isEditMode ? '#fff3e0' : '#f9f9f9', borderRadius: 2, border: isEditMode ? '2px solid #ff9800' : 'none' }}>
                {isEditMode ? (
                  <Box>
                    <InlineTextField
                      value={String(draftData.price !== undefined ? draftData.price : item.price)}
                      isEditing={true}
                      onChange={(value) => handleUpdateDraft('price', parseFloat(value) || 0)}
                      type="number"
                      placeholder="Preis"
                      required
                      disabled={draftData.is_free !== undefined ? draftData.is_free : item.is_free}
                    />
                    <Box sx={{ display: 'flex', gap: 2, mt: 1.5, flexWrap: 'wrap' }}>
                      <FormControlLabel
                        control={
                          <Checkbox
                            checked={draftData.price_negotiable !== undefined ? draftData.price_negotiable : (item.price_negotiable || false)}
                            onChange={(e) => handleUpdateDraft('price_negotiable', e.target.checked)}
                            disabled={draftData.is_free !== undefined ? draftData.is_free : item.is_free}
                          />
                        }
                        label="Verhandlungsbasis (VB)"
                      />
                      <FormControlLabel
                        control={
                          <Checkbox
                            checked={draftData.is_free !== undefined ? draftData.is_free : (item.is_free || false)}
                            onChange={(e) => {
                              handleUpdateDraft('is_free', e.target.checked);
                              if (e.target.checked) {
                                handleUpdateDraft('price', 0);
                                handleUpdateDraft('price_negotiable', false);
                              }
                            }}
                          />
                        }
                        label="Zu verschenken"
                      />
                    </Box>
                  </Box>
                ) : (
                  <Box>
                    <Typography variant={isMobile ? 'h4' : 'h3'} color="primary.main" fontWeight="bold">
                      {item.is_free ? 'Zu verschenken' : `${item.price.toFixed(2)} €`}
                      {item.price_negotiable && !item.is_free && (
                        <Chip
                          label="VB"
                          size="small"
                          sx={{ ml: 1.5, height: 28, fontWeight: 600, bgcolor: 'warning.light', color: 'warning.dark' }}
                        />
                      )}
                    </Typography>
                  </Box>
                )}
              </Box>

              {(item.brand || item.condition || isEditMode || item.ai_generated || (user?.id === item.user_id && item.view_count !== undefined)) && (
                <Box sx={{ display: 'flex', gap: 1, mb: isMobile ? 1.5 : 3, flexWrap: 'wrap', alignItems: 'center' }}>
                  {isEditMode ? (
                    <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', width: '100%' }}>
                      <Box sx={{ minWidth: 200 }}>
                        <InlineSelect
                          value={draftData.condition || item.condition || ''}
                          isEditing={true}
                          onChange={(value) => handleUpdateDraft('condition', value)}
                          options={[
                            { value: 'Neu', label: 'Neu' },
                            { value: 'Wie neu', label: 'Wie neu' },
                            { value: 'Sehr gut', label: 'Sehr gut' },
                            { value: 'Gut', label: 'Gut' },
                            { value: 'Akzeptabel', label: 'Akzeptabel' },
                          ]}
                          placeholder="Zustand wählen"
                          label="Zustand"
                        />
                      </Box>
                      <Box sx={{ minWidth: 200 }}>
                        <InlineTextField
                          value={draftData.brand || item.brand || ''}
                          isEditing={true}
                          onChange={(value) => handleUpdateDraft('brand', value)}
                          placeholder="Marke"
                          label="Marke"
                        />
                      </Box>
                    </Box>
                  ) : (
                    <>
                      {item.condition && <Chip label={item.condition} color="info" size="medium" />}
                      {item.brand && <Chip label={item.brand} variant="outlined" size="medium" />}
                    </>
                  )}
                  {item.ai_generated && (
                    <Box
                      sx={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: 0.5,
                        px: 1,
                        py: 0.5,
                        borderRadius: 1,
                        bgcolor: 'secondary.50',
                        border: 1,
                        borderColor: 'secondary.200',
                      }}
                      title="Mit KI-Unterstützung erstellt"
                    >
                      <Bot size={16} color="#9c27b0" />
                      <Typography variant="caption" color="secondary.dark" fontWeight={500}>
                        KI
                      </Typography>
                    </Box>
                  )}
                  {user?.id === item.user_id && item.view_count !== undefined && (
                    <Box
                      sx={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: 0.5,
                        px: 1,
                        py: 0.5,
                        borderRadius: 1,
                        bgcolor: 'grey.100',
                        border: 1,
                        borderColor: 'grey.300',
                      }}
                      title="Anzahl der Aufrufe"
                    >
                      <Eye size={16} color="#666" />
                      <Typography variant="caption" color="text.secondary" fontWeight={500}>
                        {item.view_count}
                      </Typography>
                    </Box>
                  )}
                </Box>
              )}

              <Divider sx={{ my: isMobile ? 2 : 3 }} />

              <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                Beschreibung
              </Typography>
              {isEditMode ? (
                <InlineTextField
                  value={draftData.description || item.description}
                  isEditing={true}
                  onChange={(value) => handleUpdateDraft('description', value)}
                  multiline
                  rows={12}
                  placeholder="Artikelbeschreibung"
                  required
                />
              ) : (
                <Typography variant="body1" color="text.secondary" paragraph sx={{ whiteSpace: 'pre-line', lineHeight: 1.8 }}>
                  {item.description}
                </Typography>
              )}

              {(
                item.category || item.subcategory ||
                item.size || item.weight || item.dimensions_length ||
                item.material || item.colors?.length || item.style ||
                item.features?.length || item.accessories?.length ||
                (item.serial_number && item.serial_number.toLowerCase() !== 'unbekannt')
              ) && (
                <>
                  <Divider sx={{ my: isMobile ? 2 : 3 }} />

                  <Typography variant="h6" sx={{ mb: 3, fontWeight: 600 }}>
                    Produktdetails
                  </Typography>

                  <Box sx={{ display: 'grid', gap: 2 }}>
                    {(item.category || item.subcategory || isEditMode) && (
                      <Box
                        sx={{
                          display: 'flex',
                          gap: 1.5,
                          p: 2,
                          bgcolor: isEditMode ? '#e3f2fd' : '#f8f9fa',
                          borderRadius: 2,
                          border: '1px solid',
                          borderColor: isEditMode ? '#2196f3' : 'grey.200',
                        }}
                      >
                        {!isEditMode && (
                          <Box sx={{ mt: 0.25, color: 'primary.main' }}>
                            <Grid3x3 size={20} />
                          </Box>
                        )}
                        <Box sx={{ flex: 1 }}>
                          {isEditMode ? (
                            <InlineSelect
                              value={draftData.category || item.category || ''}
                              isEditing={true}
                              onChange={(value) => handleUpdateDraft('category', value)}
                              options={[
                                { value: 'Elektronik', label: 'Elektronik' },
                                { value: 'Kleidung', label: 'Kleidung' },
                                { value: 'Möbel', label: 'Möbel' },
                                { value: 'Bücher', label: 'Bücher' },
                                { value: 'Sport', label: 'Sport' },
                                { value: 'Spielzeug', label: 'Spielzeug' },
                                { value: 'Haushalt', label: 'Haushalt' },
                                { value: 'Garten', label: 'Garten' },
                                { value: 'Auto', label: 'Auto & Motorrad' },
                                { value: 'Sonstiges', label: 'Sonstiges' },
                              ]}
                              placeholder="Kategorie wählen"
                              label="Kategorie"
                            />
                          ) : (
                            <>
                              <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: 0.8, display: 'block', mb: 0.5 }}>
                                Kategorie
                              </Typography>
                              <Typography variant="body2" sx={{ fontSize: '0.95rem', fontWeight: 500 }}>
                                {[item.category, item.subcategory].filter(Boolean).join(' › ')}
                              </Typography>
                            </>
                          )}
                        </Box>
                      </Box>
                    )}

                    {(item.size || isEditMode) && (
                      <Box sx={{ display: 'flex', gap: 1.5, p: 2, bgcolor: isEditMode ? '#fff3e0' : '#f8f9fa', borderRadius: 2, border: '1px solid', borderColor: isEditMode ? '#ff9800' : 'grey.200' }}>
                        {!isEditMode && <Box sx={{ mt: 0.25, color: 'success.main' }}><Ruler size={20} /></Box>}
                        <Box sx={{ flex: 1 }}>
                          {isEditMode ? (
                            <InlineTextField
                              value={draftData.size || item.size || ''}
                              isEditing={true}
                              onChange={(value) => handleUpdateDraft('size', value)}
                              label="Größe"
                              placeholder="z.B. XL, 42, 180cm"
                            />
                          ) : (
                            item.size && item.size.toLowerCase() !== 'unbekannt' && (
                              <>
                                <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: 0.8, display: 'block', mb: 0.5 }}>Größe</Typography>
                                <Typography variant="body2" sx={{ fontSize: '0.95rem', fontWeight: 500 }}>{item.size}</Typography>
                              </>
                            )
                          )}
                        </Box>
                      </Box>
                    )}

                    {(item.weight || isEditMode) && (
                      <Box sx={{ display: 'flex', gap: 1.5, p: 2, bgcolor: isEditMode ? '#fff3e0' : '#f8f9fa', borderRadius: 2, border: '1px solid', borderColor: isEditMode ? '#ff9800' : 'grey.200' }}>
                        {!isEditMode && <Box sx={{ mt: 0.25, color: 'warning.main' }}><Weight size={20} /></Box>}
                        <Box sx={{ flex: 1 }}>
                          {isEditMode ? (
                            <InlineTextField
                              value={draftData.weight || item.weight || ''}
                              isEditing={true}
                              onChange={(value) => handleUpdateDraft('weight', value)}
                              label="Gewicht"
                              placeholder="z.B. 500g, 2kg"
                            />
                          ) : (
                            item.weight && item.weight.toLowerCase() !== 'unbekannt' && (
                              <>
                                <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: 0.8, display: 'block', mb: 0.5 }}>Gewicht</Typography>
                                <Typography variant="body2" sx={{ fontSize: '0.95rem', fontWeight: 500 }}>{item.weight}</Typography>
                              </>
                            )
                          )}
                        </Box>
                      </Box>
                    )}

                    {(item.dimensions_length || isEditMode) && (
                      <Box sx={{ display: 'flex', gap: 1.5, p: 2, bgcolor: isEditMode ? '#fff3e0' : '#f8f9fa', borderRadius: 2, border: '1px solid', borderColor: isEditMode ? '#ff9800' : 'grey.200' }}>
                        {!isEditMode && <Box sx={{ mt: 0.25, color: 'info.main' }}><BoxIcon size={20} /></Box>}
                        <Box sx={{ flex: 1 }}>
                          {isEditMode ? (
                            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                              <InlineTextField
                                value={draftData.dimensions_length || item.dimensions_length || ''}
                                isEditing={true}
                                onChange={(value) => handleUpdateDraft('dimensions_length', value)}
                                label="Länge (cm)"
                                placeholder="Länge"
                              />
                              <InlineTextField
                                value={draftData.dimensions_width || item.dimensions_width || ''}
                                isEditing={true}
                                onChange={(value) => handleUpdateDraft('dimensions_width', value)}
                                label="Breite (cm)"
                                placeholder="Breite"
                              />
                              <InlineTextField
                                value={draftData.dimensions_height || item.dimensions_height || ''}
                                isEditing={true}
                                onChange={(value) => handleUpdateDraft('dimensions_height', value)}
                                label="Höhe (cm)"
                                placeholder="Höhe"
                              />
                            </Box>
                          ) : (
                            item.dimensions_length && (
                              <>
                                <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: 0.8, display: 'block', mb: 0.5 }}>Abmessungen</Typography>
                                <Typography variant="body2" sx={{ fontSize: '0.95rem', fontWeight: 500 }}>
                                  {[item.dimensions_length, item.dimensions_width, item.dimensions_height].filter(Boolean).join(' × ')}
                                </Typography>
                              </>
                            )
                          )}
                        </Box>
                      </Box>
                    )}

                    {(item.material || isEditMode) && (
                      <Box sx={{ display: 'flex', gap: 1.5, p: 2, bgcolor: isEditMode ? '#fff3e0' : '#f8f9fa', borderRadius: 2, border: '1px solid', borderColor: isEditMode ? '#ff9800' : 'grey.200' }}>
                        {!isEditMode && <Box sx={{ mt: 0.25, color: 'secondary.main' }}><Sparkles size={20} /></Box>}
                        <Box sx={{ flex: 1 }}>
                          {isEditMode ? (
                            <InlineTextField
                              value={draftData.material || item.material || ''}
                              isEditing={true}
                              onChange={(value) => handleUpdateDraft('material', value)}
                              label="Material"
                              placeholder="z.B. Baumwolle, Holz, Metall"
                            />
                          ) : (
                            item.material && (
                              <>
                                <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: 0.8, display: 'block', mb: 0.5 }}>Material</Typography>
                                <Typography variant="body2" sx={{ fontSize: '0.95rem', fontWeight: 500 }}>{item.material}</Typography>
                              </>
                            )
                          )}
                        </Box>
                      </Box>
                    )}

                    {(item.style || isEditMode) && (
                      <Box sx={{ display: 'flex', gap: 1.5, p: 2, bgcolor: isEditMode ? '#fff3e0' : '#f8f9fa', borderRadius: 2, border: '1px solid', borderColor: isEditMode ? '#ff9800' : 'grey.200' }}>
                        {!isEditMode && <Box sx={{ mt: 0.25, color: 'primary.main' }}><Tag size={20} /></Box>}
                        <Box sx={{ flex: 1 }}>
                          {isEditMode ? (
                            <InlineTextField
                              value={draftData.style || item.style || ''}
                              isEditing={true}
                              onChange={(value) => handleUpdateDraft('style', value)}
                              label="Stil"
                              placeholder="z.B. Modern, Vintage, Klassisch"
                            />
                          ) : (
                            item.style && (
                              <>
                                <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: 0.8, display: 'block', mb: 0.5 }}>Stil</Typography>
                                <Typography variant="body2" sx={{ fontSize: '0.95rem', fontWeight: 500 }}>{item.style}</Typography>
                              </>
                            )
                          )}
                        </Box>
                      </Box>
                    )}

                    {(item.colors?.length > 0 || isEditMode) && (
                      <Box sx={{ display: 'flex', gap: 1.5, p: 2, bgcolor: isEditMode ? '#fff3e0' : '#f8f9fa', borderRadius: 2, border: '1px solid', borderColor: isEditMode ? '#ff9800' : 'grey.200' }}>
                        {!isEditMode && <Box sx={{ mt: 0.25, color: 'error.main' }}><Palette size={20} /></Box>}
                        <Box sx={{ flex: 1 }}>
                          {isEditMode ? (
                            <InlineChipList
                              value={draftData.colors || item.colors || []}
                              isEditing={true}
                              onChange={(value) => handleUpdateDraft('colors', value)}
                              label="Farben"
                              placeholder="Farbe hinzufügen"
                              color="primary"
                            />
                          ) : (
                            <>
                              <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: 0.8, display: 'block', mb: 0.5 }}>Farben</Typography>
                              <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mt: 1 }}>
                                {item.colors?.map((color, idx) => (
                                  <Chip key={idx} label={color} size="small" sx={{ height: 26, fontSize: '0.85rem', fontWeight: 500, bgcolor: 'primary.50', color: 'primary.dark', border: 1, borderColor: 'primary.200' }} />
                                ))}
                              </Box>
                            </>
                          )}
                        </Box>
                      </Box>
                    )}

                    {(item.features?.length > 0 || isEditMode) && (
                      <Box sx={{ display: 'flex', gap: 1.5, p: 2, bgcolor: isEditMode ? '#e8f5e9' : '#f8f9fa', borderRadius: 2, border: '1px solid', borderColor: isEditMode ? '#4caf50' : 'grey.200' }}>
                        {!isEditMode && <Box sx={{ mt: 0.25, color: 'success.main' }}><Sparkles size={20} /></Box>}
                        <Box sx={{ flex: 1 }}>
                          {isEditMode ? (
                            <InlineChipList
                              value={draftData.features || item.features || []}
                              isEditing={true}
                              onChange={(value) => handleUpdateDraft('features', value)}
                              label="Eigenschaften"
                              placeholder="Eigenschaft hinzufügen"
                              color="success"
                            />
                          ) : (
                            <>
                              <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: 0.8, display: 'block', mb: 0.75 }}>Eigenschaften</Typography>
                              <Box sx={{ display: 'flex', gap: 0.75, flexWrap: 'wrap' }}>
                                {item.features?.map((feature, idx) => (
                                  <Chip key={idx} label={feature} size="small" sx={{ height: 26, fontSize: '0.85rem', fontWeight: 500, bgcolor: 'success.50', color: 'success.dark', border: 1, borderColor: 'success.200' }} />
                                ))}
                              </Box>
                            </>
                          )}
                        </Box>
                      </Box>
                    )}

                    {(item.accessories?.length > 0 || isEditMode) && (
                      <Box sx={{ display: 'flex', gap: 1.5, p: 2, bgcolor: isEditMode ? '#e3f2fd' : '#f8f9fa', borderRadius: 2, border: '1px solid', borderColor: isEditMode ? '#2196f3' : 'grey.200' }}>
                        {!isEditMode && <Box sx={{ mt: 0.25, color: 'info.main' }}><Package size={20} /></Box>}
                        <Box sx={{ flex: 1 }}>
                          {isEditMode ? (
                            <InlineChipList
                              value={draftData.accessories || item.accessories || []}
                              isEditing={true}
                              onChange={(value) => handleUpdateDraft('accessories', value)}
                              label="Zubehör"
                              placeholder="Zubehör hinzufügen"
                              color="info"
                            />
                          ) : (
                            <>
                              <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: 0.8, display: 'block', mb: 0.75 }}>Zubehör</Typography>
                              <Box sx={{ display: 'flex', gap: 0.75, flexWrap: 'wrap' }}>
                                {item.accessories.map((accessory, idx) => (
                                  <Chip key={idx} label={accessory} size="small" sx={{ height: 26, fontSize: '0.85rem', fontWeight: 500, bgcolor: 'info.50', color: 'info.dark', border: 1, borderColor: 'info.200' }} />
                                ))}
                              </Box>
                            </>
                          )}
                        </Box>
                      </Box>
                    )}

                    {(item.serial_number || isEditMode) && (
                      <Box sx={{ display: 'flex', gap: 1.5, p: 2, bgcolor: isEditMode ? '#fff3e0' : '#f8f9fa', borderRadius: 2, border: '1px solid', borderColor: isEditMode ? '#ff9800' : 'grey.200' }}>
                        {!isEditMode && <Box sx={{ mt: 0.25, color: 'grey.600' }}><Hash size={20} /></Box>}
                        <Box sx={{ flex: 1 }}>
                          {isEditMode ? (
                            <InlineTextField
                              value={draftData.serial_number || item.serial_number || ''}
                              isEditing={true}
                              onChange={(value) => handleUpdateDraft('serial_number', value)}
                              label="Seriennummer"
                              placeholder="Seriennummer oder Artikelnummer"
                            />
                          ) : (
                            item.serial_number && item.serial_number.toLowerCase() !== 'unbekannt' && (
                              <>
                                <Typography variant="caption" color="text.secondary" sx={{ fontWeight: 600, fontSize: '0.75rem', textTransform: 'uppercase', letterSpacing: 0.8, display: 'block', mb: 0.5 }}>Seriennummer</Typography>
                                <Typography variant="body2" sx={{ fontFamily: 'monospace', fontSize: '0.95rem', color: 'text.primary', fontWeight: 500 }}>{item.serial_number}</Typography>
                              </>
                            )
                          )}
                        </Box>
                      </Box>
                    )}
                  </Box>
                </>
              )}

              {(item.tags?.length > 0 || isEditMode) && (
                <Box sx={{ mt: 3, mb: 3 }}>
                  <Typography variant="subtitle2" color="text.secondary" sx={{ fontWeight: 600, mb: 1 }}>Tags</Typography>
                  {isEditMode ? (
                    <InlineChipList
                      value={draftData.tags || item.tags || []}
                      isEditing={true}
                      onChange={(value) => handleUpdateDraft('tags', value)}
                      placeholder="Tag hinzufügen und Enter drücken"
                    />
                  ) : (
                    <Box sx={{ display: 'flex', gap: 0.5, flexWrap: 'wrap' }}>
                      {item.tags.map((tag, idx) => (
                        <Chip key={idx} label={`#${tag}`} size="small" variant="filled" />
                      ))}
                    </Box>
                  )}
                </Box>
              )}

              <Divider sx={{ my: isMobile ? 2 : 3 }} />

              {(item.snapshot_shipping_enabled || item.snapshot_pickup_enabled) && (
                <>
                  <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                    Versand & Abholung
                  </Typography>

                  {item.snapshot_pickup_enabled && (
                    <Box sx={{ mb: 2, p: isMobile ? 1.5 : 2, bgcolor: '#f9f9f9', borderRadius: 2, border: '1px solid #e0e0e0' }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                        <MapPin size={isMobile ? 18 : 20} color="#1976d2" />
                        <Typography variant={isMobile ? 'body1' : 'subtitle1'} fontWeight={600}>Abholung möglich</Typography>
                      </Box>
                      {user && item.snapshot_show_location_publicly && item.snapshot_pickup_address ? (
                        <>
                          <Typography variant="body2" color="text.secondary">{item.snapshot_pickup_address}</Typography>
                          <Typography variant="body2" color="text.secondary">{item.snapshot_pickup_postal_code} {item.snapshot_pickup_city}, {item.snapshot_pickup_country}</Typography>
                        </>
                      ) : (
                        <Typography variant="body2" color="text.secondary">
                          {item.location || item.snapshot_pickup_city ? (
                            <>Standort: {item.location || item.snapshot_pickup_city}{item.snapshot_pickup_country ? `, ${item.snapshot_pickup_country}` : ''}</>
                          ) : (
                            'Standort auf Anfrage'
                          )}
                        </Typography>
                      )}
                      {item.snapshot_location_description && (
                        <Typography variant="body2" color="text.secondary" sx={{ mt: 1, fontStyle: 'italic' }}>{item.snapshot_location_description}</Typography>
                      )}
                    </Box>
                  )}

                  {item.snapshot_shipping_enabled && (
                    <>
                      {item.snapshot_shipping_cost_type === 'free' && (
                        <Box sx={{ mb: 2, p: isMobile ? 1.5 : 2, bgcolor: '#f9f9f9', borderRadius: 2, border: '1px solid #e0e0e0' }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                            <Truck size={isMobile ? 18 : 20} color="#1976d2" />
                            <Typography variant={isMobile ? 'body1' : 'subtitle1'} fontWeight={600}>Versand verfügbar</Typography>
                          </Box>
                          <Typography variant="body2" color="text.secondary">Versandkosten: Kostenlos</Typography>
                          {item.snapshot_shipping_description && (
                            <Typography variant="body2" color="text.secondary" sx={{ mt: 1, fontStyle: 'italic' }}>{item.snapshot_shipping_description}</Typography>
                          )}
                        </Box>
                      )}

                      {item.snapshot_shipping_cost_type === 'fixed' && (
                        <Box sx={{ mb: 2, p: isMobile ? 1.5 : 2, bgcolor: '#f9f9f9', borderRadius: 2, border: '1px solid #e0e0e0' }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                            <Truck size={isMobile ? 18 : 20} color="#1976d2" />
                            <Typography variant={isMobile ? 'body1' : 'subtitle1'} fontWeight={600}>Versand verfügbar</Typography>
                          </Box>
                          <Typography variant="body2" color="text.secondary">
                            Versandkosten: {(item.snapshot_shipping_cost && item.snapshot_shipping_cost > 0) ? `${item.snapshot_shipping_cost.toFixed(2)} €` : 'Auf Anfrage'}
                          </Typography>
                          {item.snapshot_shipping_description && (
                            <Typography variant="body2" color="text.secondary" sx={{ mt: 1, fontStyle: 'italic' }}>{item.snapshot_shipping_description}</Typography>
                          )}
                        </Box>
                      )}

                      {item.snapshot_shipping_cost_type === 'ai_calculated' && (item.ai_shipping_domestic || item.ai_shipping_international) && (
                        <Box sx={{ mb: 2, p: isMobile ? 1.5 : 2, bgcolor: '#fff3e0', borderRadius: 2, border: '1px solid #ffe0b2' }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1.5 }}>
                            <Package size={isMobile ? 18 : 20} color="#f57c00" />
                            <Typography variant={isMobile ? 'body1' : 'subtitle1'} fontWeight={600} color="#e65100">KI-berechnete Versandkosten</Typography>
                          </Box>
                          {item.ai_shipping_domestic && (
                            <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                              📦 {item.shipping_from_country === 'AT' ? 'Österreich' : item.shipping_from_country === 'DE' ? 'Deutschland' : 'Inland'}: ca. {item.ai_shipping_domestic.toFixed(2)} €
                            </Typography>
                          )}
                          {item.ai_shipping_international && (
                            <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>🌍 EU-Ausland: ca. {item.ai_shipping_international.toFixed(2)} €</Typography>
                          )}
                          {item.estimated_weight_kg && (
                            <Typography variant="body2" color="text.secondary" sx={{ mt: 1, fontSize: '0.8rem', fontStyle: 'italic' }}>
                              Geschätztes Gewicht: {item.estimated_weight_kg} kg
                            </Typography>
                          )}
                          {item.package_dimensions && (
                            <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.8rem', fontStyle: 'italic' }}>
                              Geschätzte Maße: {item.package_dimensions.length}×{item.package_dimensions.width}×{item.package_dimensions.height} cm
                            </Typography>
                          )}
                          <Typography variant="caption" color="text.secondary" sx={{ display: 'block', mt: 1.5, fontSize: '0.75rem' }}>
                            ⓘ Diese Versandkosten wurden automatisch von der KI basierend auf Größe und Gewicht geschätzt.
                          </Typography>
                          {item.snapshot_shipping_description && (
                            <Typography variant="body2" color="text.secondary" sx={{ mt: 1.5, fontStyle: 'italic' }}>{item.snapshot_shipping_description}</Typography>
                          )}
                        </Box>
                      )}
                    </>
                  )}

                  <Divider sx={{ my: isMobile ? 2 : 3 }} />
                </>
              )}

              <Box sx={{ bgcolor: '#f0f7ff', p: isMobile ? 2 : 3, borderRadius: 2, mb: isMobile ? 2 : 3, border: '1px solid #e3f2fd' }}>
                <Typography variant="h6" sx={{ mb: 1.5, fontWeight: 600 }}>Verkäufer kontaktieren</Typography>
                <Typography variant="body2" color="text.secondary" sx={{ mb: 2, lineHeight: 1.6 }}>
                  Interesse an diesem Artikel? Kontaktiere den Verkäufer für weitere Informationen oder um einen Kauf zu vereinbaren.
                </Typography>

                {pickupAddress?.phone && pickupAddress?.show_phone_publicly && (
                  <Box sx={{ mb: 2, p: 1.5, bgcolor: 'white', borderRadius: 1, border: '1px solid #e3f2fd', display: 'flex', alignItems: 'center', gap: 1.5 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', bgcolor: 'primary.main', color: 'white', borderRadius: '50%', width: 36, height: 36, flexShrink: 0 }}>
                      <Phone size={18} />
                    </Box>
                    <Box sx={{ flex: 1 }}>
                      <Typography variant="body2" color="text.secondary" sx={{ fontSize: '0.75rem', mb: 0.25 }}>
                        Telefon
                      </Typography>
                      <Typography variant="body1" sx={{ fontWeight: 600, color: 'text.primary' }}>
                        <a href={`tel:${pickupAddress.phone}`} style={{ color: 'inherit', textDecoration: 'none' }}>
                          {pickupAddress.phone}
                        </a>
                      </Typography>
                    </Box>
                  </Box>
                )}

                {messageSent && (
                  <Alert severity="success" sx={{ mb: 2 }}>Nachricht erfolgreich gesendet!</Alert>
                )}

                {error && (
                  <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>{error}</Alert>
                )}

                {user && user.id !== item.user_id && (
                  <>
                    <TextField
                      fullWidth
                      multiline
                      rows={3}
                      placeholder="Schreibe eine Nachricht an den Verkäufer..."
                      value={message}
                      onChange={(e) => setMessage(e.target.value)}
                      sx={{ mb: 2, bgcolor: 'white' }}
                      disabled={!user}
                      inputRef={messageInputRef}
                    />

                    <Button
                      variant="contained"
                      size="large"
                      fullWidth
                      onClick={handleSendMessage}
                      disabled={!user || !message.trim() || sending}
                      startIcon={<Send size={18} />}
                    >
                      {sending ? 'Wird gesendet...' : 'Nachricht senden'}
                    </Button>
                  </>
                )}
              </Box>

              <Typography variant="caption" color="text.disabled" sx={{ display: 'block', fontSize: isMobile ? '0.7rem' : '0.75rem' }}>
                Inserat-ID: {item.id.slice(0, 8)}{isMobile && <br />} • Veröffentlicht am {new Date(item.created_at).toLocaleDateString('de-DE', { day: '2-digit', month: '2-digit', year: 'numeric' })} um {new Date(item.created_at).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}
              </Typography>
            </Box>
          </Box>
        </Box>
      </Container>

      {showImageModal && (
        <div className="lightbox-overlay" onClick={() => setShowImageModal(false)}>
          <button
            className={isMobile ? (handPreference === 'left' ? "lightbox-close lightbox-close-mobile lightbox-close-left" : "lightbox-close lightbox-close-mobile") : "lightbox-close"}
            onClick={() => setShowImageModal(false)}
            aria-label="Schließen"
          >
            ✕
          </button>
          {images.length > 1 && (
            <>
              <IconButton
                onClick={(e) => { e.stopPropagation(); handlePrevImage(); }}
                disabled={currentImageIndex === 0}
                sx={{
                  position: 'absolute',
                  left: 20,
                  top: '50%',
                  transform: 'translateY(-50%)',
                  bgcolor: 'rgba(255,255,255,0.9)',
                  color: 'black',
                  '&:hover': { bgcolor: 'white' },
                  '&.Mui-disabled': {
                    bgcolor: 'rgba(255,255,255,0.3)',
                    color: 'rgba(0,0,0,0.3)',
                  },
                  boxShadow: 3,
                  zIndex: 1502,
                  width: 48,
                  height: 48,
                }}
              >
                <ChevronLeft size={32} />
              </IconButton>
              <IconButton
                onClick={(e) => { e.stopPropagation(); handleNextImage(); }}
                disabled={currentImageIndex === images.length - 1}
                sx={{
                  position: 'absolute',
                  right: 20,
                  top: '50%',
                  transform: 'translateY(-50%)',
                  bgcolor: 'rgba(255,255,255,0.9)',
                  color: 'black',
                  '&:hover': { bgcolor: 'white' },
                  '&.Mui-disabled': {
                    bgcolor: 'rgba(255,255,255,0.3)',
                    color: 'rgba(0,0,0,0.3)',
                  },
                  boxShadow: 3,
                  zIndex: 1502,
                  width: 48,
                  height: 48,
                }}
              >
                <ChevronRight size={32} />
              </IconButton>
              <Box
                sx={{
                  position: 'absolute',
                  bottom: 30,
                  left: '50%',
                  transform: 'translateX(-50%)',
                  bgcolor: 'rgba(0,0,0,0.7)',
                  color: 'white',
                  px: 3,
                  py: 1,
                  borderRadius: 3,
                  fontSize: '1rem',
                  fontWeight: 600,
                  zIndex: 1502,
                }}
              >
                {currentImageIndex + 1} / {images.length}
              </Box>
            </>
          )}
          <div className="lightbox-content" onClick={(e) => e.stopPropagation()}>
            <img src={getFullImageUrl(images[currentImageIndex])} alt={item.title} loading="lazy" />
          </div>
        </div>
      )}

      {!isMobile && (
        <Box
          sx={{
            position: 'fixed',
            bottom: 0,
            left: 0,
            right: 0,
            display: 'flex',
            justifyContent: handPreference === 'left' ? 'flex-start' : 'flex-end',
            px: 3,
            pb: 1.5,
            gap: 1,
            zIndex: 500,
            pointerEvents: 'none',
            '& > *': {
              pointerEvents: 'auto',
            },
          }}
        >
          {handPreference === 'right' ? (
            <>
              {showScrollTop && (
                <IconButton
                  onClick={scrollToTop}
                  sx={{
                    bgcolor: 'rgba(25, 118, 210, 0.85)',
                    backdropFilter: 'blur(8px)',
                    color: 'white',
                    boxShadow: 3,
                    width: 56,
                    height: 56,
                    '&:hover': {
                      bgcolor: 'rgba(25, 118, 210, 0.95)',
                      transform: 'scale(1.1)',
                    },
                    transition: 'all 0.2s',
                  }}
                >
                  <ArrowUp size={28} />
                </IconButton>
              )}
              {allItems.length > 0 && hasPrevious && (
                <IconButton
                  onClick={() => navigateToItem('prev')}
                  sx={{
                    bgcolor: 'rgba(255, 255, 255, 0.85)',
                    backdropFilter: 'blur(8px)',
                    boxShadow: 3,
                    width: 56,
                    height: 56,
                    '&:hover': {
                      bgcolor: 'rgba(255, 255, 255, 0.95)',
                      transform: 'scale(1.1)',
                    },
                    border: 2,
                    borderColor: 'rgba(25, 118, 210, 0.8)',
                    transition: 'all 0.2s',
                  }}
                >
                  <ChevronLeft size={28} color="#1976d2" />
                </IconButton>
              )}
              {allItems.length > 0 && hasNext && (
                <IconButton
                  onClick={() => navigateToItem('next')}
                  sx={{
                    bgcolor: 'rgba(255, 255, 255, 0.85)',
                    backdropFilter: 'blur(8px)',
                    boxShadow: 3,
                    width: 56,
                    height: 56,
                    '&:hover': {
                      bgcolor: 'rgba(255, 255, 255, 0.95)',
                      transform: 'scale(1.1)',
                    },
                    border: 2,
                    borderColor: 'rgba(25, 118, 210, 0.8)',
                    transition: 'all 0.2s',
                  }}
                >
                  <ChevronRight size={28} color="#1976d2" />
                </IconButton>
              )}
            </>
          ) : (
            <>
              {allItems.length > 0 && hasNext && (
                <IconButton
                  onClick={() => navigateToItem('next')}
                  sx={{
                    bgcolor: 'rgba(255, 255, 255, 0.85)',
                    backdropFilter: 'blur(8px)',
                    boxShadow: 3,
                    width: 56,
                    height: 56,
                    '&:hover': {
                      bgcolor: 'rgba(255, 255, 255, 0.95)',
                      transform: 'scale(1.1)',
                    },
                    border: 2,
                    borderColor: 'rgba(25, 118, 210, 0.8)',
                    transition: 'all 0.2s',
                  }}
                >
                  <ChevronRight size={28} color="#1976d2" />
                </IconButton>
              )}
              {allItems.length > 0 && hasPrevious && (
                <IconButton
                  onClick={() => navigateToItem('prev')}
                  sx={{
                    bgcolor: 'rgba(255, 255, 255, 0.85)',
                    backdropFilter: 'blur(8px)',
                    boxShadow: 3,
                    width: 56,
                    height: 56,
                    '&:hover': {
                      bgcolor: 'rgba(255, 255, 255, 0.95)',
                      transform: 'scale(1.1)',
                    },
                    border: 2,
                    borderColor: 'rgba(25, 118, 210, 0.8)',
                    transition: 'all 0.2s',
                  }}
                >
                  <ChevronLeft size={28} color="#1976d2" />
                </IconButton>
              )}
              {showScrollTop && (
                <IconButton
                  onClick={scrollToTop}
                  sx={{
                    bgcolor: 'rgba(25, 118, 210, 0.85)',
                    backdropFilter: 'blur(8px)',
                    color: 'white',
                    boxShadow: 3,
                    width: 56,
                    height: 56,
                    '&:hover': {
                      bgcolor: 'rgba(25, 118, 210, 0.95)',
                      transform: 'scale(1.1)',
                    },
                    transition: 'all 0.2s',
                  }}
                >
                  <ArrowUp size={28} />
                </IconButton>
              )}
            </>
          )}
        </Box>
      )}

      {isMobile && (
        <Box
          sx={{
            position: 'fixed',
            left: handPreference === 'left' ? 16 : 'auto',
            right: handPreference === 'left' ? 'auto' : 16,
            bottom: 24,
            display: 'flex',
            gap: 1,
            zIndex: 500,
          }}
        >
          {handPreference === 'right' ? (
            <>
              {showScrollTop && (
                <IconButton
                  onClick={scrollToTop}
                  sx={{
                    bgcolor: 'rgba(25, 118, 210, 0.85)',
                    backdropFilter: 'blur(8px)',
                    color: 'white',
                    boxShadow: 3,
                    width: 56,
                    height: 56,
                    '&:hover': {
                      bgcolor: 'rgba(25, 118, 210, 0.95)',
                      transform: 'scale(1.1)',
                    },
                    transition: 'all 0.2s',
                  }}
                >
                  <ArrowUp size={28} />
                </IconButton>
              )}
              {allItems.length > 0 && hasPrevious && (
                <IconButton
                  onClick={() => navigateToItem('prev')}
                  sx={{
                    bgcolor: 'rgba(255, 255, 255, 0.85)',
                    backdropFilter: 'blur(8px)',
                    boxShadow: 3,
                    width: 56,
                    height: 56,
                    '&:hover': {
                      bgcolor: 'rgba(255, 255, 255, 0.95)',
                      transform: 'scale(1.1)',
                    },
                    border: 2,
                    borderColor: 'rgba(25, 118, 210, 0.8)',
                    transition: 'all 0.2s',
                  }}
                >
                  <ChevronLeft size={28} color="#1976d2" />
                </IconButton>
              )}
              {allItems.length > 0 && hasNext && (
                <IconButton
                  onClick={() => navigateToItem('next')}
                  sx={{
                    bgcolor: 'rgba(255, 255, 255, 0.85)',
                    backdropFilter: 'blur(8px)',
                    boxShadow: 3,
                    width: 56,
                    height: 56,
                    '&:hover': {
                      bgcolor: 'rgba(255, 255, 255, 0.95)',
                      transform: 'scale(1.1)',
                    },
                    border: 2,
                    borderColor: 'rgba(25, 118, 210, 0.8)',
                    transition: 'all 0.2s',
                  }}
                >
                  <ChevronRight size={28} color="#1976d2" />
                </IconButton>
              )}
            </>
          ) : (
            <>
              {allItems.length > 0 && hasNext && (
                <IconButton
                  onClick={() => navigateToItem('next')}
                  sx={{
                    bgcolor: 'rgba(255, 255, 255, 0.85)',
                    backdropFilter: 'blur(8px)',
                    boxShadow: 3,
                    width: 56,
                    height: 56,
                    '&:hover': {
                      bgcolor: 'rgba(255, 255, 255, 0.95)',
                      transform: 'scale(1.1)',
                    },
                    border: 2,
                    borderColor: 'rgba(25, 118, 210, 0.8)',
                    transition: 'all 0.2s',
                  }}
                >
                  <ChevronRight size={28} color="#1976d2" />
                </IconButton>
              )}
              {allItems.length > 0 && hasPrevious && (
                <IconButton
                  onClick={() => navigateToItem('prev')}
                  sx={{
                    bgcolor: 'rgba(255, 255, 255, 0.85)',
                    backdropFilter: 'blur(8px)',
                    boxShadow: 3,
                    width: 56,
                    height: 56,
                    '&:hover': {
                      bgcolor: 'rgba(255, 255, 255, 0.95)',
                      transform: 'scale(1.1)',
                    },
                    border: 2,
                    borderColor: 'rgba(25, 118, 210, 0.8)',
                    transition: 'all 0.2s',
                  }}
                >
                  <ChevronLeft size={28} color="#1976d2" />
                </IconButton>
              )}
              {showScrollTop && (
                <IconButton
                  onClick={scrollToTop}
                  sx={{
                    bgcolor: 'rgba(25, 118, 210, 0.85)',
                    backdropFilter: 'blur(8px)',
                    color: 'white',
                    boxShadow: 3,
                    width: 56,
                    height: 56,
                    '&:hover': {
                      bgcolor: 'rgba(25, 118, 210, 0.95)',
                      transform: 'scale(1.1)',
                    },
                    transition: 'all 0.2s',
                  }}
                >
                  <ArrowUp size={28} />
                </IconButton>
              )}
            </>
          )}
        </Box>
      )}

      <Modal
        open={showDeleteModal}
        onClose={() => setShowDeleteModal(false)}
        title="Artikel löschen"
        maxWidth="xs"
        actions={
          <>
            <Button
              onClick={() => setShowDeleteModal(false)}
              variant="outlined"
              sx={{ textTransform: 'none' }}
            >
              Abbrechen
            </Button>
            <Button
              onClick={async () => {
                await supabase.from('items').delete().eq('id', item?.id);
                setShowDeleteModal(false);
                navigate('/');
              }}
              variant="contained"
              color="error"
              sx={{ textTransform: 'none' }}
            >
              Löschen
            </Button>
          </>
        }
      >
        <Typography>
          Möchtest du diesen Artikel wirklich löschen? Diese Aktion kann nicht rückgängig gemacht werden.
        </Typography>
      </Modal>
    </Box>
  );
};
